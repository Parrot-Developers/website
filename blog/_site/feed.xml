<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Parrot Dev Blog</title>
    <description>Life of a drone developer :)</description>
    <link>http://developer.parrot.com</link>
    <atom:link href="http://developer.parrot.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Play Bebop video stream on VLC</title>
        
        
          <description>&lt;h1&gt;Play Bebop stream on VLC&lt;/h1&gt;
</description>
        
        <pubDate>Thu, 28 Apr 2016 12:00:00 +0200</pubDate>
        <link>http://developer.parrot.com/2016/play-bebop-stream-on-vlc/</link>
        <guid isPermaLink="true">http://developer.parrot.com/2016/play-bebop-stream-on-vlc/</guid>
      </item>
    
      <item>
        <title>ARSDK, what&#39;s new in the 3.8 release ?</title>
        
        
          <description>&lt;p&gt;A new version of the Parrot drone SDK has recently been released. This SDK lets you control all Parrot&amp;#39;s new drones (Bebop 2, Bebop, JumpingSumo and evos, Rolling Spider, Airbornes) from a remote station (could be an Android or iOS phone or even a Linux based controller).&lt;br/&gt;
This new release brings lots of new cool improvements. We will explain all of them in detail. &lt;br/&gt;
The majority of these changes have been made because we are trying to use more and more public, tried and tested tools.&lt;/p&gt;
</description>
        
        <pubDate>Fri, 08 Jan 2016 11:00:00 +0100</pubDate>
        <link>http://developer.parrot.com/2016/ARSDK-3-8-release/</link>
        <guid isPermaLink="true">http://developer.parrot.com/2016/ARSDK-3-8-release/</guid>
      </item>
    
      <item>
        <title>Running Ardupilot on Bebop Drone</title>
        
        
          <description>&lt;p&gt;These instructions clarify how to build ArduPilot for the Bebop flight controller board on a Linux machine. More details on the Bebop can be found &lt;a href=&quot;http://copter.ardupilot.com/wiki/parrot-bebop-autopilot/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
        
        <pubDate>Tue, 24 Nov 2015 08:20:00 +0100</pubDate>
        <link>http://developer.parrot.com/2015/running-apm-on-bebop/</link>
        <guid isPermaLink="true">http://developer.parrot.com/2015/running-apm-on-bebop/</guid>
      </item>
    
      <item>
        <title>Namespaces, AppArmor and overlayfs - Part 3 / 3</title>
        
        
          <description>&lt;p&gt;Now our rootfs has it&amp;#39;s file system which we&amp;#39;ll be able to restore to it&amp;#39;s
initial state with some umounts and rms.
It can also be shared between multiple instances.
What&amp;#39;s more it is quite isolated from the rest of the system.
But the first things a firmware&amp;#39;s pid 1 will do, will be to mount &lt;strong&gt;/proc&lt;/strong&gt;,
&lt;strong&gt;/sys&lt;/strong&gt; and &lt;strong&gt;/dev&lt;/strong&gt; and by doing so, will gain access to potentially harmful
global resources.&lt;br&gt;
One of (the many) solutions involves a linux security module, such as SELinux or
AppArmor.
I choose to use the latter, first of all, because of it&amp;#39;s shell like glob syntax
which is (sort of) human readable.
This post, last of the series, will present the way one can implement it &amp;quot;by
hands&amp;quot;, as I did in &lt;strong&gt;firmwared&lt;/strong&gt;.&lt;/p&gt;
</description>
        
        <pubDate>Mon, 26 Oct 2015 08:20:00 +0100</pubDate>
        <link>http://developer.parrot.com/2015/namespaces-overlayfs-and-apparmor-3-3/</link>
        <guid isPermaLink="true">http://developer.parrot.com/2015/namespaces-overlayfs-and-apparmor-3-3/</guid>
      </item>
    
      <item>
        <title>Namespaces, AppArmor and overlayfs - Part 2 / 3</title>
        
        
          <description>&lt;p&gt;Now that the firmware can be instantiated in it&amp;#39;s own namespace, in it&amp;#39;s own
root, we would like to be able to run multiple instances in parallel, without
having one modifying the file system of the other.
If possible, it would be great if we could keep the original firmware pristine
and have the diff between it before and after the run, easily identifiable.
This problem can be solved with union file systems in general and OverlayFS in
particular, which is the object of this post.&lt;/p&gt;
</description>
        
        <pubDate>Sat, 24 Oct 2015 01:21:00 +0200</pubDate>
        <link>http://developer.parrot.com/2015/namespaces-overlayfs-and-apparmor-2-3/</link>
        <guid isPermaLink="true">http://developer.parrot.com/2015/namespaces-overlayfs-and-apparmor-2-3/</guid>
      </item>
    
      <item>
        <title>Namespaces, AppArmor and overlayfs - Part 1 / 3</title>
        
        
          <description>&lt;p&gt;The purpose of &lt;a href=&quot;https://github.com/ncarrier/firmwared-manifest&quot;&gt;firmwared&lt;/a&gt;, is to make a specially compiled firmware, (for a
 drone, for example) modified as little as possible, run on a desktop PC.
But if one wants to run a firmware&amp;#39;s pid 1 (in our case, boxinit, an android
init&amp;#39;s fork), he has to run it as root.
Then the problem is: how to protect the host PC from potentially harmful
behavior of the firmware ?&lt;br&gt;
In this series of three blog posts, I will present the approach I have taken in
firmwared, to attempt to solve this problem.&lt;/p&gt;
</description>
        
        <pubDate>Fri, 23 Oct 2015 19:52:00 +0200</pubDate>
        <link>http://developer.parrot.com/2015/namespaces-overlayfs-and-apparmor-1-3/</link>
        <guid isPermaLink="true">http://developer.parrot.com/2015/namespaces-overlayfs-and-apparmor-1-3/</guid>
      </item>
    
      <item>
        <title>Welcome, Marty!</title>
        
        
          <description>&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello, world!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        
        <pubDate>Wed, 21 Oct 2015 18:29:00 +0200</pubDate>
        <link>http://developer.parrot.com/2015/welcome-marty/</link>
        <guid isPermaLink="true">http://developer.parrot.com/2015/welcome-marty/</guid>
      </item>
    
  </channel>
</rss>